# ðŸŒ–ðŸŒ– Copyright Monwoo 2023 ðŸŒ–ðŸŒ–, re-build by Miguel Monwoo for AtoutConseil,
# service@monwoo.com

# https://gist.github.com/alch/7766993
# https://stackoverflow.com/questions/6840578/getting-the-base-url-of-the-website-and-globally-passing-it-to-twig-in-symfony-2

# For a symfony application to work properly, you MUST store this .htaccess in
# the same directory as your front controller, index.php, in a standard symfony
# web application is under the "public" project subdirectory.

allow from all

# AddHandler "proxy:unix:/....../php8.1.socket|fcgi://" .php

# Use the front controller as index file.
DirectoryIndex index.php

RewriteEngine On
# RewriteBase /demos/sf-pdf-billings/

# Force https
RewriteCond %{HTTP:X-Forwarded-Proto} =http
RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]

# # auth token headers on redirects
# RewriteCond %{HTTP:Authorization} .
# RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

# # SF App :
# RewriteCond %{REQUEST_FILENAME} !-f
# RewriteCond %{REQUEST_FILENAME} !-d
# # RewriteCond %{REQUEST_URI} !^/index.php
# RewriteRule ^(.*) index.php/$1 [L,QSA]
# # RewriteRule ^(.*)$ index.php$1 [QSA,L]

#RewriteBase /atoutconseil/
#
#RewriteCond %{THE_REQUEST} /public/([^\s?]*) [NC]
#RewriteRule ^ %1 [L,NE,R=302]
#
#RewriteRule ^((?!public/).*)$ public/$1 [L,NC]

# Redirect to URI without front controller to prevent duplicate content
# (with and without `/app.php`). Only do this redirect on the initial
# rewrite by Apache and not on subsequent cycles. Otherwise we would get an
# endless redirect loop (request -> rewrite to front controller ->
# redirect -> request -> ...).
# So in case you get a "too many redirects" error or you always get redirected
# to the startpage because your Apache does not expose the REDIRECT_STATUS
# environment variable, you have 2 choices:
# - disable this feature by commenting the following 2 lines or
# - use Apache >= 2.3.9 and replace all L flags by END flags and remove the
#   following RewriteCond (best solution)
# RewriteCond %{ENV:REDIRECT_STATUS} ^$
# RewriteRule ^index\.php(/(.*)|$) %{CONTEXT_PREFIX}/$2 [R=301,L]

# # If the requested filename exists, simply serve it.
# # We only want to let Apache serve files and not directories.
# RewriteCond %{REQUEST_FILENAME} -f
# RewriteRule .? - [L]

# cache-bust assets url rewrite
# Example format: /cpv-10/js/test123.js -> /js/test123.js
# This allows us to change the asset version and "bust" intermediate caches (like varnish)
# See http://symfony.com/doc/current/reference/configuration/framework.html#ref-framework-assets-version
# See http://symfony.com/doc/current/reference/configuration/framework.html#assets-version-format
# RewriteCond %{REQUEST_FILENAME} !-f
# RewriteCond %{REQUEST_FILENAME} !-d
# RewriteRule ^cpv-\d+\/(.+)$ $1 [L]

# # The following rewrites all other queries to the front controller. The
# # condition ensures that if you are using Apache aliases to do mass virtual
# # hosting, the base path will be prepended to allow proper resolution of the
# # app.php file; it will work in non-aliased environments as well, providing
# # a safe, one-size fits all solution.
# RewriteCond %{REQUEST_URI}::$1 ^(/.+)(.+)::\2$
# RewriteRule ^(.*) - [E=BASE:%1]
# RewriteRule .? %{ENV:BASE}index.php [L]

# Redirect to URI without front controller to prevent duplicate content
# (with and without `/app.php`). Only do this redirect on the initial
# rewrite by Apache and not on subsequent cycles. Otherwise we would get an
# endless redirect loop (request -> rewrite to front controller ->
# redirect -> request -> ...).
# So in case you get a "too many redirects" error or you always get redirected
# to the startpage because your Apache does not expose the REDIRECT_STATUS
# environment variable, you have 2 choices:
# - disable this feature by commenting the following 2 lines or
# - use Apache >= 2.3.9 and replace all L flags by END flags and remove the
#   following RewriteCond (best solution)
RewriteCond %{ENV:REDIRECT_STATUS} ^$
RewriteRule ^index\.php(/(.*)|$) %{CONTEXT_PREFIX}/$2 [R=301,L]

# If the requested filename exists, simply serve it.
# We only want to let Apache serve files and not directories.
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule .? - [L]

# cache-bust assets url rewrite
# Example format: /cpv-10/js/test123.js -> /js/test123.js
# This allows us to change the asset version and "bust" intermediate caches (like varnish)
# See http://symfony.com/doc/current/reference/configuration/framework.html#ref-framework-assets-version
# See http://symfony.com/doc/current/reference/configuration/framework.html#assets-version-format
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^cpv-\d+\/(.+)$ $1 [L]

RewriteCond %{REQUEST_FILENAME} -f
RewriteRule ^(.*)$ index.php [QSA,L]

# The following rewrites all other queries to the front controller. The
# condition ensures that if you are using Apache aliases to do mass virtual
# hosting, the base path will be prepended to allow proper resolution of the
# app.php file; it will work in non-aliased environments as well, providing
# a safe, one-size fits all solution.
RewriteCond %{REQUEST_URI}::$1 ^(/.+)(.+)::\2$
RewriteRule ^(.*) - [E=BASE:%1]
RewriteRule .? %{ENV:BASE}index.php [L]